{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./piece-sizing.service\";\nexport let CalculateHeightDirective = /*#__PURE__*/(() => {\n  class CalculateHeightDirective {\n    //note - only works when moving to bigger size.\n    //     - would have to minimize puzzle first for smaller screen\n    //@HostListener('window:resize') onResize() {\n    //  this.pieceSizingService.setNewFontSizeFactor(2); \n    //  this.calculateHeight();\n    //}\n    constructor(elementRef, pieceSizingService) {\n      this.elementRef = elementRef;\n      this.pieceSizingService = pieceSizingService;\n    }\n    ngAfterViewInit() {\n      this.calculateHeight();\n    }\n    calculateHeight() {\n      const currentHeight = this.elementRef.nativeElement.offsetHeight;\n      const currentWidth = this.elementRef.nativeElement.offsetWidth;\n      this.pieceSizingService.setNewContainerHeight(currentWidth, currentHeight, this.determineLayout(currentWidth, currentHeight));\n    }\n    determineLayout(width, height) {\n      //either 'vertical', 'mixed', or 'vertical'\n      let layout;\n      //mobile to tablet\n      if (width < 1000 || height < 600) {\n        if (width > 700 || width > height) {\n          layout = 'layout-mixed';\n        } else {\n          layout = 'layout-vertical';\n        }\n      }\n      //laptop to ultra\n      else {\n        layout = 'layout-horizontal';\n      }\n      return layout;\n    }\n  }\n  CalculateHeightDirective.ɵfac = function CalculateHeightDirective_Factory(t) {\n    return new (t || CalculateHeightDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.PieceSizingService));\n  };\n  CalculateHeightDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: CalculateHeightDirective,\n    selectors: [[\"\", \"calculateHeight\", \"\"]]\n  });\n  return CalculateHeightDirective;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}