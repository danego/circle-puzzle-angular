{"ast":null,"code":"import { FormGroup, FormControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../bank-circle-connector.service\";\nimport * as i2 from \"../solutions-grabber.service\";\nimport * as i3 from \"../piece-sizing.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/slide-toggle\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"@ng-select/ng-select\";\nfunction ControlPanelVerticalComponent_mat_slide_toggle_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-slide-toggle\", 18);\n    i0.ɵɵlistener(\"change\", function ControlPanelVerticalComponent_mat_slide_toggle_4_Template_mat_slide_toggle_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.onSlideChange($event));\n    });\n    i0.ɵɵtext(1, \" Show all solutions \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"checked\", !ctx_r0.limitSolutionsShown)(\"ngClass\", !ctx_r0.limitSolutionsShown ? \"all-solutions\" : \"limited-solutions\");\n  }\n}\nfunction ControlPanelVerticalComponent_ng_select_5_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0);\n  }\n  if (rf & 2) {\n    const item_r12 = ctx.item;\n    i0.ɵɵtextInterpolate1(\" \", item_r12.value, \" \");\n  }\n}\nfunction ControlPanelVerticalComponent_ng_select_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ng-select\", 19);\n    i0.ɵɵlistener(\"change\", function ControlPanelVerticalComponent_ng_select_5_Template_ng_select_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.onLoadNewSolution($event));\n    });\n    i0.ɵɵtemplate(1, ControlPanelVerticalComponent_ng_select_5_ng_template_1_Template, 1, 1, \"ng-template\", 20);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"items\", ctx_r1.numberOfSolutionsArray)(\"clearable\", false)(\"searchable\", false);\n  }\n}\nfunction ControlPanelVerticalComponent_select_6_option_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const solnNumber_r16 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(solnNumber_r16);\n  }\n}\nfunction ControlPanelVerticalComponent_select_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"select\", 21);\n    i0.ɵɵlistener(\"change\", function ControlPanelVerticalComponent_select_6_Template_select_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.onLoadNewSolutionMobile(+$event.target.value));\n    });\n    i0.ɵɵelementStart(1, \"option\", 22);\n    i0.ɵɵtext(2, \"Solutions:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, ControlPanelVerticalComponent_select_6_option_3_Template, 2, 1, \"option\", 23);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.numberOfSolutionsArray);\n  }\n}\nfunction ControlPanelVerticalComponent_p_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r3.remainingSolutions, \" remaining \", ctx_r3.remainingSolutions === 1 ? \"solution\" : \"solutions\", \"\");\n  }\n}\nfunction ControlPanelVerticalComponent_p_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"You found solution # \", ctx_r4.currentSolutionNumber, \"\");\n  }\n}\nfunction ControlPanelVerticalComponent_input_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 24);\n    i0.ɵɵlistener(\"click\", function ControlPanelVerticalComponent_input_17_Template_input_click_0_listener() {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r20.onToggleAutoOpen());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ControlPanelVerticalComponent_input_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 25);\n    i0.ɵɵlistener(\"click\", function ControlPanelVerticalComponent_input_18_Template_input_click_0_listener() {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r22.enableScrollZones());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ControlPanelVerticalComponent_ng_select_20_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r25 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ng-select\", 26);\n    i0.ɵɵlistener(\"change\", function ControlPanelVerticalComponent_ng_select_20_Template_ng_select_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r25);\n      const ctx_r24 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r24.onLoadNewPattern($event));\n    });\n    i0.ɵɵelementStart(1, \"ng-option\", 27);\n    i0.ɵɵtext(2, \"Patterns:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ng-option\", 28);\n    i0.ɵɵtext(4, \"Planets\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"ng-option\", 29);\n    i0.ɵɵtext(6, \"Egypt\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"ng-option\", 30);\n    i0.ɵɵtext(8, \"Atlantis\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"clearable\", false)(\"searchable\", false);\n  }\n}\nfunction ControlPanelVerticalComponent_select_21_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r27 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"select\", 31);\n    i0.ɵɵlistener(\"change\", function ControlPanelVerticalComponent_select_21_Template_select_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r26.onLoadNewPattern($event.target.value));\n    });\n    i0.ɵɵelementStart(1, \"option\", 27);\n    i0.ɵɵtext(2, \"Patterns:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"option\");\n    i0.ɵɵtext(4, \"Planets\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"option\");\n    i0.ɵɵtext(6, \"Egypt\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"option\");\n    i0.ɵɵtext(8, \"Atlantis\");\n    i0.ɵɵelementEnd()();\n  }\n}\nconst _c0 = function (a0, a1) {\n  return {\n    \"min-height\": a0,\n    \"flex-direction\": a1\n  };\n};\nconst _c1 = function (a0) {\n  return {\n    \"display\": a0\n  };\n};\nconst _c2 = function (a0) {\n  return {\n    \"flex-direction\": a0\n  };\n};\nexport let ControlPanelVerticalComponent = /*#__PURE__*/(() => {\n  class ControlPanelVerticalComponent {\n    constructor(bankCircleConnectorService, solutionsGrabberService, pieceSizingService) {\n      this.bankCircleConnectorService = bankCircleConnectorService;\n      this.solutionsGrabberService = solutionsGrabberService;\n      this.pieceSizingService = pieceSizingService;\n      this.numberOfSolutionsArray = [];\n      this.remainingSolutions = 0;\n      this.allPiecesUsed = false;\n      this.displaySolutionsPanel = false;\n      this.limitSolutionsShown = false;\n      this.currentPattern = 'Planets';\n      this.displayColorLetters = true;\n      this.autoOpenEnabled = true;\n      this.scrollZonesEnabled = true;\n    }\n    ngOnInit() {\n      this.remainingSolutionsSub = this.solutionsGrabberService.remainingSolutions.subscribe(remainingSolutions => {\n        this.remainingSolutions = remainingSolutions;\n      });\n      this.allPiecesUsedSub = this.solutionsGrabberService.allPiecesUsedSubject.subscribe(allPiecesUsed => {\n        this.allPiecesUsed = allPiecesUsed;\n      });\n      this.currentSolutionNumberSub = this.solutionsGrabberService.currentSolutionNumber.subscribe(solnNumber => {\n        this.currentSolutionNumber = solnNumber;\n      });\n      // implicitly gets height for control panel\n      this.pieceSizesSub = this.pieceSizingService.pieceSizes.subscribe(pieceSizesData => {\n        this.pieceSizes = pieceSizesData;\n        //containerSize accessed from pieceSizes in HTML\n      });\n      //set placeholder value depending on ng-select or default select used\n      let solutionDropdownPlaceholder = this.determinePlaceholderValue();\n      //note: the values of the toggle controls are inverted\n      //they display opposite message of what's currently shown.\n      //will be needed when saving user preferences into local storage\n      this.controlButtonsForm = new FormGroup({\n        'patternNameDropdown': new FormControl(\"Planets\"),\n        'autoOpenEnabled': new FormControl(\"Disable Auto Open\"),\n        'scrollZonesEnabled': new FormControl(\"Hide Scroll Zones\"),\n        'toggleLetters': new FormControl(\"Toggle Letters Off\"),\n        'showAllSolutions': new FormControl('true'),\n        'solutionNumberDropdown': new FormControl(solutionDropdownPlaceholder),\n        'toggleSolutionsPanel': new FormControl(\"Reveal Solutions Panel\") //\"{{displaySolutionsPanel ? 'Hide' : 'Reveal'}} Solutions Panel\"\n      });\n\n      this.generateSolutions();\n    }\n    moveAllToBank() {\n      this.bankCircleConnectorService.transferAllToBank();\n    }\n    moveAllToCircle(solutionNumber) {\n      if (solutionNumber || solutionNumber === 0) {\n        this.bankCircleConnectorService.transferAllToCircle(solutionNumber);\n      } else {\n        this.bankCircleConnectorService.transferAllToCircle();\n      }\n    }\n    onToggleColorLetters() {\n      this.displayColorLetters = !this.displayColorLetters;\n      this.bankCircleConnectorService.toggleColorLetters(this.displayColorLetters);\n      this.controlButtonsForm.get('toggleLetters').patchValue(this.displayColorLetters ? \"Toggle Letters Off\" : \"Toggle Letters On\");\n    }\n    //mobile only because of touch events\n    onToggleAutoOpen() {\n      this.autoOpenEnabled = !this.autoOpenEnabled;\n      this.bankCircleConnectorService.toggleAutoOpen(this.autoOpenEnabled);\n      this.controlButtonsForm.get('autoOpenEnabled').patchValue(this.autoOpenEnabled ? \"Disable Auto Open\" : \"Enable Auto Open\");\n    }\n    enableScrollZones() {\n      this.scrollZonesEnabled = !this.scrollZonesEnabled;\n      this.bankCircleConnectorService.toggleScrollZones(this.scrollZonesEnabled);\n      this.controlButtonsForm.get('scrollZonesEnabled').patchValue(this.scrollZonesEnabled ? \"Hide Scroll Zones\" : \"Show Scroll Zones\");\n    }\n    generateSolutions() {\n      const numberOfSolutions = this.solutionsGrabberService.startGeneratingSolutions();\n      this.numberOfSolutions = numberOfSolutions;\n      this.numberOfSolutionsArray = new Array(numberOfSolutions);\n      //default select takes primitives \n      //ng-select takes object to display diff value when selected\n      if (this.currentLayout === 'layout-vertical') {\n        for (let i = 0; i < numberOfSolutions; i++) {\n          this.numberOfSolutionsArray[i] = i;\n        }\n      } else {\n        for (let i = 0; i < numberOfSolutions; i++) {\n          this.numberOfSolutionsArray[i] = {\n            number: i,\n            value: 'Solution: ' + i\n          };\n        }\n      }\n    }\n    generateLimitedSolutions(dropdownValue) {\n      if (!dropdownValue) dropdownValue = 0;\n      this.numberOfSolutionsArray = new Array(11);\n      let startOption, endOption;\n      if (dropdownValue - 5 < 0) {\n        startOption = 0;\n        endOption = 10;\n      } else if (dropdownValue + 5 > this.numberOfSolutions - 1) {\n        startOption = this.numberOfSolutions - 11;\n        endOption = this.numberOfSolutions - 1;\n      } else {\n        startOption = dropdownValue - 5;\n        endOption = dropdownValue + 5;\n      }\n      //default select takes primitives \n      //ng-select takes object to display diff value when selected\n      let j = 0;\n      if (this.currentLayout === 'layout-vertical') {\n        for (let i = startOption; i <= endOption; i++) {\n          this.numberOfSolutionsArray[j] = i;\n          j++;\n        }\n      } else {\n        for (let i = startOption; i <= endOption; i++) {\n          this.numberOfSolutionsArray[j] = {\n            number: i,\n            value: 'Solution: ' + i\n          };\n          j++;\n        }\n      }\n    }\n    onSlideChange(event) {\n      this.limitSolutionsShown = !event.checked;\n      const dropdownValue = +this.controlButtonsForm.get('solutionNumberDropdown').value;\n      if (this.limitSolutionsShown) {\n        this.generateLimitedSolutions(dropdownValue);\n      } else {\n        this.generateSolutions();\n      }\n    }\n    //event value is custom from ng-select so no event.target.value\n    onLoadNewSolution(optionData) {\n      const solutionNumber = optionData.number;\n      this.moveAllToCircle(solutionNumber);\n    }\n    onLoadNewSolutionMobile(solutionNumber) {\n      this.controlButtonsForm.value;\n      this.moveAllToCircle(solutionNumber);\n    }\n    //event value is custom from ng-select so no event.target.value\n    onLoadNewPattern(patternName) {\n      this.solutionsGrabberService.changeCurrentPattern(patternName.toLowerCase());\n      this.moveAllToCircle();\n      this.currentPattern = patternName;\n      this.generateSolutions();\n      //reset soln picker to placeholder text; slideToggle to show all\n      let solutionDropdownPlaceholder = this.determinePlaceholderValue();\n      this.controlButtonsForm.patchValue({\n        solutionNumberDropdown: solutionDropdownPlaceholder,\n        showAllSolutions: true\n      });\n    }\n    onToggleSolutionsPanel() {\n      this.displaySolutionsPanel = !this.displaySolutionsPanel;\n      this.controlButtonsForm.patchValue({\n        toggleSolutionsPanel: this.displaySolutionsPanel ? \"Hide Solutions Panel\" : \"Reveal Solutions Panel\"\n      });\n    }\n    //set placeholder value depending on ng-select or default select used\n    determinePlaceholderValue() {\n      let solutionDropdownPlaceholder;\n      if (this.currentLayout === 'layout-vertical') {\n        solutionDropdownPlaceholder = 'Solutions:';\n      } else {\n        solutionDropdownPlaceholder = null;\n      }\n      return solutionDropdownPlaceholder;\n    }\n    ngOnDestroy() {\n      if (this.remainingSolutionsSub) this.remainingSolutionsSub.unsubscribe();\n      if (this.allPiecesUsedSub) this.allPiecesUsedSub.unsubscribe();\n      if (this.currentSolutionNumberSub) this.currentSolutionNumberSub.unsubscribe();\n      if (this.pieceSizesSub) this.pieceSizesSub.unsubscribe();\n    }\n  }\n  ControlPanelVerticalComponent.ɵfac = function ControlPanelVerticalComponent_Factory(t) {\n    return new (t || ControlPanelVerticalComponent)(i0.ɵɵdirectiveInject(i1.BankCircleConnectorService), i0.ɵɵdirectiveInject(i2.SolutionsGrabberService), i0.ɵɵdirectiveInject(i3.PieceSizingService));\n  };\n  ControlPanelVerticalComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ControlPanelVerticalComponent,\n    selectors: [[\"control-panel-vertical\"]],\n    hostVars: 4,\n    hostBindings: function ControlPanelVerticalComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"margin\", ctx.margin)(\"height\", ctx.height);\n      }\n    },\n    inputs: {\n      currentLayout: \"currentLayout\"\n    },\n    decls: 22,\n    vars: 20,\n    consts: [[3, \"formGroup\", \"ngStyle\"], [\"type\", \"button\", \"formControlName\", \"toggleSolutionsPanel\", 1, \"solutions-toggle\", 3, \"click\"], [\"id\", \"solutions\", 1, \"solutions\", 3, \"ngStyle\"], [1, \"soln-picker\"], [\"disableRipple\", \"true\", \"labelPosition\", \"before\", \"formControlName\", \"showAllSolutions\", 3, \"checked\", \"ngClass\", \"change\", 4, \"ngIf\"], [\"class\", \"custom-select\", \"id\", \"soln-number\", \"formControlName\", \"solutionNumberDropdown\", \"bindLabel\", \"number\", \"bindValue\", \"number\", \"placeholder\", \"Solution #\", 3, \"items\", \"clearable\", \"searchable\", \"change\", 4, \"ngIf\"], [\"id\", \"soln-number-mobile\", \"class\", \"select-mobile\", \"formControlName\", \"solutionNumberDropdown\", 3, \"change\", 4, \"ngIf\"], [1, \"solutions-remaining\"], [4, \"ngIf\"], [1, \"spacer\"], [1, \"button-container\", 3, \"ngStyle\"], [3, \"click\"], [\"type\", \"button\", \"formControlName\", \"toggleLetters\", 3, \"click\"], [\"type\", \"button\", \"formControlName\", \"autoOpenEnabled\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", \"title\", \"While dragging a piece, allows you to scroll to correct piece bank.\", \"formControlName\", \"scrollZonesEnabled\", 3, \"click\", 4, \"ngIf\"], [1, \"pattern-dropdown\"], [\"class\", \"custom-select\", \"id\", \"pattern-select\", \"formControlName\", \"patternNameDropdown\", 3, \"clearable\", \"searchable\", \"change\", 4, \"ngIf\"], [\"id\", \"pattern-select-mobile\", \"class\", \"select-mobile\", \"formControlName\", \"patternNameDropdown\", 3, \"change\", 4, \"ngIf\"], [\"disableRipple\", \"true\", \"labelPosition\", \"before\", \"formControlName\", \"showAllSolutions\", 3, \"checked\", \"ngClass\", \"change\"], [\"id\", \"soln-number\", \"formControlName\", \"solutionNumberDropdown\", \"bindLabel\", \"number\", \"bindValue\", \"number\", \"placeholder\", \"Solution #\", 1, \"custom-select\", 3, \"items\", \"clearable\", \"searchable\", \"change\"], [\"ng-label-tmp\", \"\"], [\"id\", \"soln-number-mobile\", \"formControlName\", \"solutionNumberDropdown\", 1, \"select-mobile\", 3, \"change\"], [\"disabled\", \"\", \"selected\", \"\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", \"formControlName\", \"autoOpenEnabled\", 3, \"click\"], [\"type\", \"button\", \"title\", \"While dragging a piece, allows you to scroll to correct piece bank.\", \"formControlName\", \"scrollZonesEnabled\", 3, \"click\"], [\"id\", \"pattern-select\", \"formControlName\", \"patternNameDropdown\", 1, \"custom-select\", 3, \"clearable\", \"searchable\", \"change\"], [\"disabled\", \"\"], [\"value\", \"Planets\"], [\"value\", \"Egypt\"], [\"value\", \"Atlantis\"], [\"id\", \"pattern-select-mobile\", \"formControlName\", \"patternNameDropdown\", 1, \"select-mobile\", 3, \"change\"]],\n    template: function ControlPanelVerticalComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"section\", 0)(1, \"input\", 1);\n        i0.ɵɵlistener(\"click\", function ControlPanelVerticalComponent_Template_input_click_1_listener() {\n          return ctx.onToggleSolutionsPanel();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 2)(3, \"div\", 3);\n        i0.ɵɵtemplate(4, ControlPanelVerticalComponent_mat_slide_toggle_4_Template, 2, 2, \"mat-slide-toggle\", 4);\n        i0.ɵɵtemplate(5, ControlPanelVerticalComponent_ng_select_5_Template, 2, 3, \"ng-select\", 5);\n        i0.ɵɵtemplate(6, ControlPanelVerticalComponent_select_6_Template, 4, 1, \"select\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 7);\n        i0.ɵɵtemplate(8, ControlPanelVerticalComponent_p_8_Template, 2, 2, \"p\", 8);\n        i0.ɵɵtemplate(9, ControlPanelVerticalComponent_p_9_Template, 2, 1, \"p\", 8);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(10, \"div\", 9);\n        i0.ɵɵelementStart(11, \"div\", 10)(12, \"button\", 11);\n        i0.ɵɵlistener(\"click\", function ControlPanelVerticalComponent_Template_button_click_12_listener() {\n          return ctx.moveAllToBank();\n        });\n        i0.ɵɵtext(13, \"Move All to Bank\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"button\", 11);\n        i0.ɵɵlistener(\"click\", function ControlPanelVerticalComponent_Template_button_click_14_listener() {\n          return ctx.moveAllToCircle();\n        });\n        i0.ɵɵtext(15, \"Move all to Circle\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"input\", 12);\n        i0.ɵɵlistener(\"click\", function ControlPanelVerticalComponent_Template_input_click_16_listener() {\n          return ctx.onToggleColorLetters();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(17, ControlPanelVerticalComponent_input_17_Template, 1, 0, \"input\", 13);\n        i0.ɵɵtemplate(18, ControlPanelVerticalComponent_input_18_Template, 1, 0, \"input\", 14);\n        i0.ɵɵelementStart(19, \"div\", 15);\n        i0.ɵɵtemplate(20, ControlPanelVerticalComponent_ng_select_20_Template, 9, 2, \"ng-select\", 16);\n        i0.ɵɵtemplate(21, ControlPanelVerticalComponent_select_21_Template, 9, 0, \"select\", 17);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.controlButtonsForm)(\"ngStyle\", i0.ɵɵpureFunction2(13, _c0, ctx.pieceSizes.containerSize + \"px\", ctx.currentLayout === \"layout-vertical\" ? \"column-reverse\" : \"column\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(16, _c1, ctx.displaySolutionsPanel ? \"flex\" : \"none\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.currentPattern === \"Planets\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.currentLayout === \"layout-horizontal\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.currentLayout === \"layout-vertical\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.remainingSolutions !== 1 || !ctx.allPiecesUsed);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.remainingSolutions === 1 && ctx.allPiecesUsed);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(18, _c2, ctx.currentLayout === \"layout-vertical\" ? \"column-reverse\" : \"column\"));\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.currentLayout === \"layout-vertical\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.currentLayout === \"layout-horizontal\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.currentLayout === \"layout-horizontal\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.currentLayout === \"layout-vertical\");\n      }\n    },\n    dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i4.NgStyle, i5.MatSlideToggle, i6.NgSelectOption, i6.ɵNgSelectMultipleOption, i6.DefaultValueAccessor, i6.SelectControlValueAccessor, i6.NgControlStatus, i6.NgControlStatusGroup, i6.FormGroupDirective, i6.FormControlName, i7.NgSelectComponent, i7.NgOptionComponent, i7.NgLabelTemplateDirective],\n    styles: [\"section[_ngcontent-%COMP%]{min-width:230px;box-sizing:border-box;margin:10px;padding:15px 0;background-color:#fcfaf5;border:1px solid #222222;border-radius:30px;box-shadow:1px 1px #639;display:flex;flex-direction:column;justify-content:space-around;align-items:center;font-family:sans-serif!important;font-size:14px!important}@media (max-width: 900px){section[_ngcontent-%COMP%]{font-size:16px!important;margin-bottom:17px}}button[_ngcontent-%COMP%], input[_ngcontent-%COMP%]{margin:3px;padding:10px;border:1px solid #222222;border-radius:30px;background-color:#efefef;cursor:pointer;font-family:sans-serif;font-size:14px;-webkit-appearance:none}button[_ngcontent-%COMP%]:hover, input[_ngcontent-%COMP%]:hover{background-color:#c5c5c5}button[_ngcontent-%COMP%]:active, input[_ngcontent-%COMP%]:active{border:1px solid rgba(255,64,129);background-color:#ff408133}button[_ngcontent-%COMP%]:focus, input[_ngcontent-%COMP%]:focus{outline:none}@media (max-width: 900px){button[_ngcontent-%COMP%], input[_ngcontent-%COMP%]{font-size:16px!important}}.button-container[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center}@media (max-width: 900px){button[_ngcontent-%COMP%], input[_ngcontent-%COMP%]{min-width:155px}}@media (min-width: 901px){button[_ngcontent-%COMP%], input[_ngcontent-%COMP%]{min-width:140px}}.pattern-dropdown[_ngcontent-%COMP%]{margin:3px;height:38px}.select-mobile[_ngcontent-%COMP%]{min-width:155px;font-size:16px;border-radius:30px;border-color:#000;background-color:#efefef;-webkit-appearance:none;background-image:url(\\\"data:image/svg+xml;utf8,<svg fill='black' height='24' viewBox='0 0 24 24' width='24' xmlns='http://www.w3.org/2000/svg'><path d='M7 10l5 5 5-5z'/><path d='M0 0h24v24H0z' fill='none'/></svg>\\\");background-repeat:no-repeat;background-position-x:95%;background-position-y:50%;height:40px;padding:0 10px}.spacer[_ngcontent-%COMP%]{flex-grow:1}.solutions-toggle[_ngcontent-%COMP%]{min-width:170px}@media (max-width: 900px){.solutions-toggle[_ngcontent-%COMP%]{min-width:180px}}.solutions[_ngcontent-%COMP%]{margin:7px 0;display:flex;flex-direction:column;justify-content:space-around;align-items:center}.soln-picker[_ngcontent-%COMP%]{margin-bottom:2px;display:flex;flex-direction:column;align-items:center}.soln-picker[_ngcontent-%COMP%] > *[_ngcontent-%COMP%]{margin-bottom:5px}.mat-slide-toggle-content[_ngcontent-%COMP%]{font-family:Times New Roman,Times,serif}.all-solutions[_ngcontent-%COMP%]{color:#ff4081;font-family:Times New Roman,Times,serif}.limited-solutions[_ngcontent-%COMP%]{font-family:Times New Roman,Times,serif;color:#000}select[_ngcontent-%COMP%]:focus{outline:none}.solutions-remaining[_ngcontent-%COMP%]{min-width:170px;height:50px;box-sizing:border-box;padding:2px;border:1px dashed #222222;border-radius:30px;display:flex;align-items:center;justify-content:center;text-align:center}@media (max-width: 900px){.solutions-remaining[_ngcontent-%COMP%]{min-width:180px}}\"]\n  });\n  return ControlPanelVerticalComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}