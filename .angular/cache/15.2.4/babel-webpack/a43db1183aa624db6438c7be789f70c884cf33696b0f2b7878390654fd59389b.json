{"ast":null,"code":"import { Subject, BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let PieceSizingService = /*#__PURE__*/(() => {\n  class PieceSizingService {\n    constructor() {\n      this._pieceSizes = {\n        pieceZero: {\n          width: 4.2,\n          height: 4.2,\n          bankWidth: 0\n        },\n        pieceOne: {\n          width: 17,\n          height: 7.6,\n          bankWidth: 17\n        },\n        pieceTwo: {\n          width: 10,\n          height: 7.6,\n          bankWidth: 20\n        },\n        pieceThree: {\n          width: 10.5,\n          height: 4,\n          bankWidth: 10.5\n        },\n        fontSizeFactor: 2,\n        containerSize: 0,\n        minBankWidth: 0\n      };\n      this.currentLayout = new Subject();\n      this.pieceSizes = new BehaviorSubject(Object.assign({}, this._pieceSizes));\n    }\n    //dynamically calculate overall puzzle sizing, piece font size, # of piece repeats, \n    //adjacent component heights (piece bank & vertical control panel), & minimum bank width\n    setNewContainerHeight(newContainerWidth, newContainerHeight, layoutStyle) {\n      //Timeout to avoid angular 'already checked' error\n      window.setTimeout(() => {\n        let containerLimitingSize = this.calculateCircleSize(newContainerWidth, newContainerHeight, layoutStyle);\n        //used for circle and piece sizing\n        const newFontSizeFactor = this.setNewFontSizeFactor(containerLimitingSize);\n        this._pieceSizes.fontSizeFactor = newFontSizeFactor;\n        this.setNewFontSizeForPieces(newFontSizeFactor);\n        //used for pieceBank container\n        this.setNewContainerSizeForBank(containerLimitingSize, newContainerHeight, layoutStyle, newFontSizeFactor);\n        this.currentLayout.next(layoutStyle);\n        this.pieceSizes.next(Object.assign({}, this._pieceSizes));\n      }, 0);\n    }\n    calculateCircleSize(newContainerWidth, newContainerHeight, layoutStyle) {\n      let pieceBankStartingWidth = 232;\n      let pieceBankXMargin;\n      let controlPanelWidth = 250;\n      let circleSize;\n      if (layoutStyle === 'layout-vertical') {\n        circleSize = newContainerWidth;\n      } else {\n        if (layoutStyle === 'layout-mixed') {\n          //margin only right\n          pieceBankXMargin = 10;\n          controlPanelWidth = 0;\n          circleSize = newContainerWidth - pieceBankStartingWidth - pieceBankXMargin;\n        } else if (layoutStyle === 'layout-horizontal') {\n          //margin both left & right\n          pieceBankXMargin = 20;\n          circleSize = newContainerWidth - pieceBankStartingWidth - pieceBankXMargin - controlPanelWidth;\n        }\n        const newFontSizeFactor = this.setNewFontSizeFactor(circleSize);\n        const minPieceBankSize = Math.ceil(newFontSizeFactor * this._pieceSizes.pieceTwo.width * 2);\n        //232px - 40px (for padding)\n        if (minPieceBankSize > pieceBankStartingWidth - 40) {\n          const pieceBankMinPadding = 40;\n          const newPieceBankWidth = Math.ceil(newFontSizeFactor * this._pieceSizes.pieceTwo.width * 2) + pieceBankMinPadding;\n          circleSize = newContainerWidth - newPieceBankWidth - pieceBankXMargin - controlPanelWidth;\n          this._pieceSizes.minBankWidth = newPieceBankWidth;\n        }\n      }\n      //check if height is limiting factor\n      if (circleSize > newContainerHeight) {\n        circleSize = newContainerHeight;\n      }\n      //max circle size = 1200px / 15 fontSizeFactor\n      if (circleSize > 1200) {\n        circleSize = 1200;\n      }\n      return circleSize;\n    }\n    //used to dynamically size all of puzzle using ems\n    setNewFontSizeFactor(newContainerHeight) {\n      const startingCircleHeightFactor = 800;\n      const startingFontSizeFactor = 10;\n      let newFontSizeFactor = +(newContainerHeight / startingCircleHeightFactor * startingFontSizeFactor).toFixed(3);\n      //set max/min \n      if (newFontSizeFactor > 15) newFontSizeFactor = 15;else if (newFontSizeFactor < 3.5) newFontSizeFactor = 3.5;\n      return newFontSizeFactor;\n    }\n    //used to set actual font size for text on puzzle pieces\n    setNewFontSizeForPieces(fontSizeFactor) {\n      //because startingFontSizeFactor == 10px and relative font size to that is 15px\n      const fontSizeConversion = 1.5;\n      const fontSizeForPiecesText = +(fontSizeFactor * fontSizeConversion).toFixed(2);\n      this._pieceSizes.fontSizeForPieces = fontSizeForPiecesText;\n    }\n    setNewContainerSizeForBank(containerSize, containerHeight, layoutStyle, fontSizeFactor) {\n      // double up piece columns if space is available\n      if (layoutStyle === 'layout-vertical' || layoutStyle === 'layout-mixed') {\n        this.setBankWidthsForRepeats(fontSizeFactor);\n      }\n      if (layoutStyle === 'layout-vertical') {\n        //set bankHeight to fill remaining vertical space\n        let bankHeight = containerHeight - containerSize;\n        if (bankHeight > containerSize * 2 / 3) bankHeight = Math.floor(containerSize * 2 / 3);\n        if (bankHeight < 200) bankHeight = 200;\n        bankHeight -= 20; //leave vertical margins\n        this._pieceSizes.containerSize = bankHeight;\n      } else {\n        containerSize -= 20; //leave vertical margins\n        this._pieceSizes.containerSize = containerSize;\n      }\n    }\n    setBankWidthsForRepeats(fontSizeFactor) {\n      //set width for each layer\n      let pieceBankInnerWidth = 192; //232px - 40px (for padding)\n      // Layer One\n      let pieceOneWholeRepeats = Math.floor(pieceBankInnerWidth / (this._pieceSizes.pieceOne.width * fontSizeFactor));\n      if (pieceOneWholeRepeats > 3) pieceOneWholeRepeats = 3;\n      this._pieceSizes.pieceOne.bankWidth = pieceOneWholeRepeats * this._pieceSizes.pieceOne.width;\n      // Layer Two\n      let pieceTwoWholeRepeats = Math.floor(pieceBankInnerWidth / (this._pieceSizes.pieceTwo.width * fontSizeFactor));\n      if (pieceTwoWholeRepeats > 3) pieceTwoWholeRepeats = 3;\n      this._pieceSizes.pieceTwo.bankWidth = pieceTwoWholeRepeats * this._pieceSizes.pieceTwo.width;\n      // Layer Three\n      let pieceThreeWholeRepeats = Math.floor(pieceBankInnerWidth / (this._pieceSizes.pieceThree.width * fontSizeFactor));\n      if (pieceThreeWholeRepeats > 2) pieceThreeWholeRepeats = 2;\n      this._pieceSizes.pieceThree.bankWidth = pieceThreeWholeRepeats * this._pieceSizes.pieceThree.width;\n    }\n  }\n  PieceSizingService.ɵfac = function PieceSizingService_Factory(t) {\n    return new (t || PieceSizingService)();\n  };\n  PieceSizingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PieceSizingService,\n    factory: PieceSizingService.ɵfac,\n    providedIn: 'root'\n  });\n  return PieceSizingService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}