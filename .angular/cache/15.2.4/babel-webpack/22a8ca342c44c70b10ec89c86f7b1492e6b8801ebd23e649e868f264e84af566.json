{"ast":null,"code":"import { FormGroup, FormControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../bank-circle-connector.service\";\nimport * as i2 from \"../solutions-grabber.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/slide-toggle\";\nimport * as i5 from \"@angular/forms\";\nfunction ControlPanelComponent_mat_slide_toggle_20_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-slide-toggle\", 16);\n    i0.ɵɵlistener(\"change\", function ControlPanelComponent_mat_slide_toggle_20_Template_mat_slide_toggle_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onSlideChange($event));\n    });\n    i0.ɵɵtext(1, \" Show all solutions \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"checked\", !ctx_r0.limitSolutionsShown)(\"ngClass\", !ctx_r0.limitSolutionsShown ? \"all-solutions\" : \"limited-solutions\");\n  }\n}\nfunction ControlPanelComponent_option_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const solnNumber_r6 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(solnNumber_r6);\n  }\n}\nfunction ControlPanelComponent_p_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r2.remainingSolutions, \" remaining \", ctx_r2.remainingSolutions === 1 ? \"solution\" : \"solutions\", \"\");\n  }\n}\nfunction ControlPanelComponent_p_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"You found solution # \", ctx_r3.currentSolutionNumber, \"\");\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"display\": a0\n  };\n};\nexport let ControlPanelComponent = /*#__PURE__*/(() => {\n  class ControlPanelComponent {\n    constructor(bankCircleConnectorService, solutionsGrabberService) {\n      this.bankCircleConnectorService = bankCircleConnectorService;\n      this.solutionsGrabberService = solutionsGrabberService;\n      this.numberOfSolutionsArray = [];\n      this.remainingSolutions = 0;\n      this.allPiecesUsed = false;\n      this.displaySolutionsPanel = false;\n      this.limitSolutionsShown = false;\n      this.currentPattern = 'Planets';\n      this.displayColorLetters = true;\n      this.autoOpenEnabled = true;\n    }\n    ngOnInit() {\n      this.remainingSolutionsSub = this.solutionsGrabberService.remainingSolutions.subscribe(remainingSolutions => {\n        this.remainingSolutions = remainingSolutions;\n      });\n      this.allPiecesUsedSub = this.solutionsGrabberService.allPiecesUsedSubject.subscribe(allPiecesUsed => {\n        this.allPiecesUsed = allPiecesUsed;\n      });\n      this.currentSolutionNumberSub = this.solutionsGrabberService.currentSolutionNumber.subscribe(solnNumber => {\n        this.currentSolutionNumber = solnNumber;\n      });\n      //note: the values of the toggle controls are inverted\n      //they display opposite message of what's currently shown.\n      //will be needed when saving user preferences into local storage\n      this.controlButtonsForm = new FormGroup({\n        'patternNameDropdown': new FormControl(\"Planets\"),\n        'toggleLetters': new FormControl(\"Toggle Letters Off\"),\n        'autoOpenEnabled': new FormControl(\"Disable Auto Open\"),\n        'showAllSolutions': new FormControl(true),\n        'solutionNumberDropdown': new FormControl('Solutions:'),\n        'toggleSolutionsPanel': new FormControl(\"Reveal Solutions Panel\") //\"{{displaySolutionsPanel ? 'Hide' : 'Reveal'}} Solutions Panel\"\n      });\n\n      this.generateSolutions();\n    }\n    moveAllToBank() {\n      this.bankCircleConnectorService.transferAllToBank();\n    }\n    moveAllToCircle(solutionNumber) {\n      if (solutionNumber || solutionNumber === 0) {\n        this.bankCircleConnectorService.transferAllToCircle(solutionNumber);\n      } else {\n        this.bankCircleConnectorService.transferAllToCircle();\n      }\n    }\n    onToggleColorLetters() {\n      this.displayColorLetters = !this.displayColorLetters;\n      this.bankCircleConnectorService.toggleColorLetters(this.displayColorLetters);\n      this.controlButtonsForm.get('toggleLetters').patchValue(this.displayColorLetters ? \"Toggle Letters Off\" : \"Toggle Letters On\");\n    }\n    //mobile only because of touch events\n    onToggleAutoOpen() {\n      this.autoOpenEnabled = !this.autoOpenEnabled;\n      this.bankCircleConnectorService.toggleAutoOpen(this.autoOpenEnabled);\n      this.controlButtonsForm.get('autoOpenEnabled').patchValue(this.autoOpenEnabled ? \"Disable Auto Open\" : \"Enable Auto Open\");\n    }\n    generateSolutions() {\n      const numberOfSolutions = this.solutionsGrabberService.startGeneratingSolutions();\n      this.numberOfSolutions = numberOfSolutions;\n      this.numberOfSolutionsArray = new Array(numberOfSolutions);\n      for (let i = 0; i < numberOfSolutions; i++) {\n        this.numberOfSolutionsArray[i] = i;\n      }\n    }\n    generateLimitedSolutions(dropdownValue) {\n      if (!dropdownValue) dropdownValue = 0;\n      this.numberOfSolutionsArray = new Array(11);\n      let startOption, endOption;\n      if (dropdownValue - 5 < 0) {\n        startOption = 0;\n        endOption = 10;\n      } else if (dropdownValue + 5 > this.numberOfSolutions - 1) {\n        startOption = this.numberOfSolutions - 11;\n        endOption = this.numberOfSolutions - 1;\n      } else {\n        startOption = dropdownValue - 5;\n        endOption = dropdownValue + 5;\n      }\n      let j = 0;\n      for (let i = startOption; i <= endOption; i++) {\n        this.numberOfSolutionsArray[j] = i;\n        j++;\n      }\n    }\n    onSlideChange(event) {\n      this.limitSolutionsShown = !event.checked;\n      const dropdownValue = +this.controlButtonsForm.get('solutionNumberDropdown').value;\n      if (this.limitSolutionsShown) {\n        this.generateLimitedSolutions(dropdownValue);\n      } else {\n        this.generateSolutions();\n      }\n    }\n    onLoadNewSolutionMobile(solutionNumber) {\n      this.controlButtonsForm.value;\n      this.moveAllToCircle(solutionNumber);\n    }\n    //event value is custom from ng-select so no event.target.value\n    onLoadNewPattern(patternName) {\n      this.solutionsGrabberService.changeCurrentPattern(patternName.toLowerCase());\n      this.moveAllToCircle();\n      this.currentPattern = patternName;\n      this.generateSolutions();\n      //reset soln picker to default\n      this.controlButtonsForm.patchValue({\n        solutionNumberDropdown: 'Solutions:',\n        showAllSolutions: true\n      });\n    }\n    onToggleSolutionsPanel() {\n      this.displaySolutionsPanel = !this.displaySolutionsPanel;\n      this.controlButtonsForm.patchValue({\n        toggleSolutionsPanel: this.displaySolutionsPanel ? \"Hide Solutions Panel\" : \"Reveal Solutions Panel\"\n      });\n    }\n    ngOnDestroy() {\n      if (this.remainingSolutionsSub) this.remainingSolutionsSub.unsubscribe();\n      if (this.allPiecesUsedSub) this.allPiecesUsedSub.unsubscribe();\n      if (this.currentSolutionNumberSub) this.currentSolutionNumberSub.unsubscribe();\n    }\n  }\n  ControlPanelComponent.ɵfac = function ControlPanelComponent_Factory(t) {\n    return new (t || ControlPanelComponent)(i0.ɵɵdirectiveInject(i1.BankCircleConnectorService), i0.ɵɵdirectiveInject(i2.SolutionsGrabberService));\n  };\n  ControlPanelComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ControlPanelComponent,\n    selectors: [[\"control-panel\"]],\n    hostVars: 4,\n    hostBindings: function ControlPanelComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"margin\", ctx.margin)(\"height\", ctx.height);\n      }\n    },\n    decls: 28,\n    vars: 8,\n    consts: [[3, \"formGroup\"], [1, \"button-container\"], [3, \"click\"], [\"type\", \"button\", \"formControlName\", \"toggleLetters\", 3, \"click\"], [\"type\", \"button\", \"formControlName\", \"autoOpenEnabled\", 1, \"button-auto-open\", 3, \"click\"], [1, \"pattern-dropdown\"], [\"id\", \"pattern-select-mobile\", \"formControlName\", \"patternNameDropdown\", 1, \"select-mobile\", 3, \"change\"], [\"disabled\", \"\"], [\"type\", \"button\", \"formControlName\", \"toggleSolutionsPanel\", 1, \"solutions-toggle\", 3, \"click\"], [\"id\", \"solutions\", 1, \"solutions\", 3, \"ngStyle\"], [\"disableRipple\", \"true\", \"labelPosition\", \"before\", \"formControlName\", \"showAllSolutions\", 3, \"checked\", \"ngClass\", \"change\", 4, \"ngIf\"], [\"id\", \"soln-number-mobile\", \"formControlName\", \"solutionNumberDropdown\", 1, \"select-mobile\", 3, \"change\"], [\"disabled\", \"\", \"selected\", \"\"], [4, \"ngFor\", \"ngForOf\"], [1, \"solutions-remaining\"], [4, \"ngIf\"], [\"disableRipple\", \"true\", \"labelPosition\", \"before\", \"formControlName\", \"showAllSolutions\", 3, \"checked\", \"ngClass\", \"change\"]],\n    template: function ControlPanelComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"section\", 0)(1, \"div\", 1)(2, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function ControlPanelComponent_Template_button_click_2_listener() {\n          return ctx.moveAllToBank();\n        });\n        i0.ɵɵtext(3, \"Move All to Bank\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function ControlPanelComponent_Template_button_click_4_listener() {\n          return ctx.moveAllToCircle();\n        });\n        i0.ɵɵtext(5, \"Move all to Circle\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"input\", 3);\n        i0.ɵɵlistener(\"click\", function ControlPanelComponent_Template_input_click_6_listener() {\n          return ctx.onToggleColorLetters();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"input\", 4);\n        i0.ɵɵlistener(\"click\", function ControlPanelComponent_Template_input_click_7_listener() {\n          return ctx.onToggleAutoOpen();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 5)(9, \"select\", 6);\n        i0.ɵɵlistener(\"change\", function ControlPanelComponent_Template_select_change_9_listener($event) {\n          return ctx.onLoadNewPattern($event.target.value);\n        });\n        i0.ɵɵelementStart(10, \"option\", 7);\n        i0.ɵɵtext(11, \"Patterns:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"option\");\n        i0.ɵɵtext(13, \"Planets\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"option\");\n        i0.ɵɵtext(15, \"Egypt\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"option\");\n        i0.ɵɵtext(17, \"Atlantis\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(18, \"input\", 8);\n        i0.ɵɵlistener(\"click\", function ControlPanelComponent_Template_input_click_18_listener() {\n          return ctx.onToggleSolutionsPanel();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"div\", 9);\n        i0.ɵɵtemplate(20, ControlPanelComponent_mat_slide_toggle_20_Template, 2, 2, \"mat-slide-toggle\", 10);\n        i0.ɵɵelementStart(21, \"select\", 11);\n        i0.ɵɵlistener(\"change\", function ControlPanelComponent_Template_select_change_21_listener($event) {\n          return ctx.onLoadNewSolutionMobile(+$event.target.value);\n        });\n        i0.ɵɵelementStart(22, \"option\", 12);\n        i0.ɵɵtext(23, \"Solutions:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(24, ControlPanelComponent_option_24_Template, 2, 1, \"option\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"div\", 14);\n        i0.ɵɵtemplate(26, ControlPanelComponent_p_26_Template, 2, 2, \"p\", 15);\n        i0.ɵɵtemplate(27, ControlPanelComponent_p_27_Template, 2, 1, \"p\", 15);\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.controlButtonsForm);\n        i0.ɵɵadvance(19);\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(6, _c0, ctx.displaySolutionsPanel ? \"flex\" : \"none\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.currentPattern === \"Planets\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.numberOfSolutionsArray);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.remainingSolutions !== 1 || !ctx.allPiecesUsed);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.remainingSolutions === 1 && ctx.allPiecesUsed);\n      }\n    },\n    dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i3.NgStyle, i4.MatSlideToggle, i5.NgSelectOption, i5.ɵNgSelectMultipleOption, i5.DefaultValueAccessor, i5.SelectControlValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.FormGroupDirective, i5.FormControlName],\n    styles: [\"section[_ngcontent-%COMP%]{min-height:75px;width:calc(100% - 20px);box-sizing:border-box;margin:0 10px 25px;padding:10px 0;background-color:#fcfaf5;border:1px solid #222222;border-radius:30px;box-shadow:1px 1px #639;display:flex;justify-content:space-around;flex-wrap:wrap;align-items:center;font-family:sans-serif!important;font-size:14px!important}@media (max-width: 900px){section[_ngcontent-%COMP%]{font-size:16px!important}}@media (max-width: 750px){section[_ngcontent-%COMP%]{margin-bottom:17px}}section[_ngcontent-%COMP%] > div[_ngcontent-%COMP%]{margin:auto 5px}button[_ngcontent-%COMP%], input[_ngcontent-%COMP%]{margin:3px;padding:10px;border:1px solid #222222;border-radius:30px;background-color:#efefef;cursor:pointer;font-family:sans-serif;font-size:14px;-webkit-appearance:none}button[_ngcontent-%COMP%]:hover, input[_ngcontent-%COMP%]:hover{background-color:#c5c5c5}button[_ngcontent-%COMP%]:active, input[_ngcontent-%COMP%]:active{border:1px solid rgba(255,64,129);background-color:#ff408133}button[_ngcontent-%COMP%]:focus, input[_ngcontent-%COMP%]:focus{outline:none}.button-container[_ngcontent-%COMP%]{flex-grow:1;display:flex;flex-direction:row;justify-content:space-evenly;align-items:center;flex-wrap:wrap}.button-container[_ngcontent-%COMP%] > *[_ngcontent-%COMP%]{min-width:128px}.button-auto-open[_ngcontent-%COMP%]{min-width:140px!important}.pattern-dropdown[_ngcontent-%COMP%]{margin:3px;height:38px}.select-mobile[_ngcontent-%COMP%]{min-width:145px;font-size:16px;border-radius:30px;border-color:#000;background-color:#efefef;-webkit-appearance:none;background-image:url(\\\"data:image/svg+xml;utf8,<svg fill='black' height='24' viewBox='0 0 24 24' width='24' xmlns='http://www.w3.org/2000/svg'><path d='M7 10l5 5 5-5z'/><path d='M0 0h24v24H0z' fill='none'/></svg>\\\");background-repeat:no-repeat;background-position-x:95%;background-position-y:50%;height:40px;padding:0 10px}.solutions-toggle[_ngcontent-%COMP%]{min-width:170px!important;margin-right:10px}.solutions[_ngcontent-%COMP%]{flex-grow:2;display:flex;justify-content:space-evenly;align-items:center}.solutions[_ngcontent-%COMP%] > *[_ngcontent-%COMP%]{margin:2px}.mat-slide-toggle-content[_ngcontent-%COMP%]{font-family:Times New Roman,Times,serif}.all-solutions[_ngcontent-%COMP%]{color:#ff4081;font-family:Times New Roman,Times,serif}.limited-solutions[_ngcontent-%COMP%]{font-family:Times New Roman,Times,serif;color:#000}select[_ngcontent-%COMP%]:focus{outline:none}.solutions-remaining[_ngcontent-%COMP%]{min-width:170px;height:50px;box-sizing:border-box;padding:2px;border:1px dashed #222222;border-radius:30px;display:flex;align-items:center;justify-content:center;text-align:center}@media (max-width: 900px){.solutions-remaining[_ngcontent-%COMP%]{min-width:180px}}\"]\n  });\n  return ControlPanelComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}