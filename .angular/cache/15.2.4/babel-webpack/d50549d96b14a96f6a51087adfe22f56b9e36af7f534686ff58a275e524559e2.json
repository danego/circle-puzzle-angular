{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./solutions-grabber.service\";\nexport let BankCircleConnectorService = /*#__PURE__*/(() => {\n  class BankCircleConnectorService {\n    constructor(solutionsGrabberService) {\n      this.solutionsGrabberService = solutionsGrabberService;\n      this.isDraggingFromBank = new Subject();\n      this.isDraggingFromCircle = new Subject();\n      this.moveAllPieces = new Subject(); //emits either 'toBank' or 'toCircle'\n      this.droppedPieceData = new Subject();\n      this.pieceDroppedInCircle = new Subject();\n      this.displayColorLetters = new Subject();\n      this.enableAutoOpen = new Subject();\n      this.scrollZonesEnabled = new Subject();\n    }\n    transferAllToBank() {\n      this.solutionsGrabberService.moveAllPieces('toBank');\n      this.moveAllPieces.next('toBank');\n    }\n    transferAllToCircle(solutionNumber) {\n      if (solutionNumber || solutionNumber === 0) {\n        this.solutionsGrabberService.moveAllPieces('toCircle', solutionNumber);\n      } else {\n        this.solutionsGrabberService.moveAllPieces('toCircle');\n      }\n      this.moveAllPieces.next('toCircle');\n    }\n    droppedUpdatePiecesById(layer, position, pieceId) {\n      // here => bankCircleConnector => CircleComponent (update piecesByID) => solutionsGrabber (run soln comparison)\n      this.droppedPieceData.next({\n        layer: layer,\n        position: position,\n        pieceId: pieceId\n      });\n    }\n    droppedInCircle(layer) {\n      this.pieceDroppedInCircle.next(layer);\n    }\n    dragStartedFromBank(layer) {\n      this.isDraggingFromBank.next({\n        layer: layer,\n        enabled: true\n      });\n    }\n    dragStartedFromCircle(layer) {\n      this.isDraggingFromCircle.next({\n        layer: layer,\n        enabled: true\n      });\n    }\n    dragEndedFromBank(layer) {\n      this.isDraggingFromBank.next({\n        layer: layer,\n        enabled: false\n      });\n    }\n    dragEndedFromCircle(layer) {\n      this.isDraggingFromCircle.next({\n        layer: layer,\n        enabled: false\n      });\n    }\n    toggleColorLetters(enabled) {\n      this.displayColorLetters.next(enabled);\n    }\n    toggleAutoOpen(enabled) {\n      this.enableAutoOpen.next(enabled);\n    }\n    toggleScrollZones(enabled) {\n      this.scrollZonesEnabled.next(enabled);\n    }\n  }\n  BankCircleConnectorService.ɵfac = function BankCircleConnectorService_Factory(t) {\n    return new (t || BankCircleConnectorService)(i0.ɵɵinject(i1.SolutionsGrabberService));\n  };\n  BankCircleConnectorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BankCircleConnectorService,\n    factory: BankCircleConnectorService.ɵfac,\n    providedIn: 'root'\n  });\n  return BankCircleConnectorService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}